/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v0/orgs/{organization_id}/access_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Org Tokens
         * @description List organization-level API tokens
         */
        get: operations["list_org_tokens_v0_orgs__organization_id__access_tokens_get"];
        put?: never;
        /**
         * Create Org Token
         * @description Create an organization-level API token
         */
        post: operations["create_org_token_v0_orgs__organization_id__access_tokens_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/access_tokens/{token_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Org Token
         * @description Delete an organization-level API token
         */
        delete: operations["delete_org_token_v0_orgs__organization_id__access_tokens__token_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Documents
         * @description List documents within an organization
         */
        get: operations["list_documents_v0_orgs__organization_id__documents_get"];
        put?: never;
        /**
         * Upload Document
         * @description Upload one or more documents
         */
        post: operations["upload_document_v0_orgs__organization_id__documents_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/documents/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document
         * @description Get a document (original or associated PDF)
         */
        get: operations["get_document_v0_orgs__organization_id__documents__document_id__get"];
        /**
         * Update Document
         * @description Update a document
         */
        put: operations["update_document_v0_orgs__organization_id__documents__document_id__put"];
        post?: never;
        /**
         * Delete Document
         * @description Delete a document
         */
        delete: operations["delete_document_v0_orgs__organization_id__documents__document_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/ocr/download/blocks/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Ocr Blocks
         * @description Download OCR blocks for a document
         */
        get: operations["download_ocr_blocks_v0_orgs__organization_id__ocr_download_blocks__document_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/ocr/download/text/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download Ocr Text
         * @description Download OCR text for a document
         */
        get: operations["download_ocr_text_v0_orgs__organization_id__ocr_download_text__document_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/ocr/download/metadata/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Ocr Metadata
         * @description Get OCR metadata for a document
         */
        get: operations["get_ocr_metadata_v0_orgs__organization_id__ocr_download_metadata__document_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/llm/run/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Llm Analysis
         * @description Run LLM on a document, with optional force refresh.
         */
        post: operations["run_llm_analysis_v0_orgs__organization_id__llm_run__document_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/llm/result/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Llm Result
         * @description Retrieve existing LLM results for a document.
         */
        get: operations["get_llm_result_v0_orgs__organization_id__llm_result__document_id__get"];
        /**
         * Update Llm Result
         * @description Update LLM results with user edits and verification status.
         */
        put: operations["update_llm_result_v0_orgs__organization_id__llm_result__document_id__put"];
        post?: never;
        /**
         * Delete Llm Result
         * @description Delete LLM results for a specific document and prompt.
         */
        delete: operations["delete_llm_result_v0_orgs__organization_id__llm_result__document_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/schemas": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Schemas
         * @description List latest schema revisions within an organization
         */
        get: operations["list_schemas_v0_orgs__organization_id__schemas_get"];
        put?: never;
        /**
         * Create Schema
         * @description Create a schema
         */
        post: operations["create_schema_v0_orgs__organization_id__schemas_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/schemas/{schema_revid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Schema
         * @description Get a schema revision
         */
        get: operations["get_schema_v0_orgs__organization_id__schemas__schema_revid__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/schemas/{schema_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Schema
         * @description Update a schema
         */
        put: operations["update_schema_v0_orgs__organization_id__schemas__schema_id__put"];
        post?: never;
        /**
         * Delete Schema
         * @description Delete a schema
         */
        delete: operations["delete_schema_v0_orgs__organization_id__schemas__schema_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/schemas/{schema_revid}/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate Against Schema
         * @description Validate data against a schema revision
         */
        post: operations["validate_against_schema_v0_orgs__organization_id__schemas__schema_revid__validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Prompts
         * @description List prompts within an organization
         */
        get: operations["list_prompts_v0_orgs__organization_id__prompts_get"];
        put?: never;
        /**
         * Create Prompt
         * @description Create a prompt
         */
        post: operations["create_prompt_v0_orgs__organization_id__prompts_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/prompts/{prompt_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Prompt
         * @description Get a prompt
         */
        get: operations["get_prompt_v0_orgs__organization_id__prompts__prompt_id__get"];
        /**
         * Update Prompt
         * @description Update a prompt
         */
        put: operations["update_prompt_v0_orgs__organization_id__prompts__prompt_id__put"];
        post?: never;
        /**
         * Delete Prompt
         * @description Delete a prompt
         */
        delete: operations["delete_prompt_v0_orgs__organization_id__prompts__prompt_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Tags
         * @description List tags
         */
        get: operations["list_tags_v0_orgs__organization_id__tags_get"];
        put?: never;
        /**
         * Create Tag
         * @description Create a tag
         */
        post: operations["create_tag_v0_orgs__organization_id__tags_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/tags/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Tag
         * @description Update a tag
         */
        put: operations["update_tag_v0_orgs__organization_id__tags__tag_id__put"];
        post?: never;
        /**
         * Delete Tag
         * @description Delete a tag
         */
        delete: operations["delete_tag_v0_orgs__organization_id__tags__tag_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/flows": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Flows */
        get: operations["list_flows_v0_orgs__organization_id__flows_get"];
        put?: never;
        /** Create Flow */
        post: operations["create_flow_v0_orgs__organization_id__flows_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/orgs/{organization_id}/flows/{flow_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Flow */
        get: operations["get_flow_v0_orgs__organization_id__flows__flow_id__get"];
        /** Update Flow */
        put: operations["update_flow_v0_orgs__organization_id__flows__flow_id__put"];
        post?: never;
        /** Delete Flow */
        delete: operations["delete_flow_v0_orgs__organization_id__flows__flow_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Auth Token
         * @description Create an authentication token
         */
        post: operations["create_auth_token_v0_account_auth_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/access_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Account Tokens
         * @description List account-level API tokens
         */
        get: operations["list_account_tokens_v0_account_access_tokens_get"];
        put?: never;
        /**
         * Create Account Token
         * @description Create an account-level API token
         */
        post: operations["create_account_token_v0_account_access_tokens_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/access_tokens/{token_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete Account Token
         * @description Delete an account-level API token
         */
        delete: operations["delete_account_token_v0_account_access_tokens__token_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/llm_models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Llm Models
         * @description List all supported LLM models
         */
        get: operations["list_llm_models_v0_account_llm_models_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/llm_tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Llm Token List
         * @description List LLM tokens (admin only)
         */
        get: operations["llm_token_list_v0_account_llm_tokens_get"];
        put?: never;
        /**
         * Llm Token Create
         * @description Create or update an LLM token (admin only)
         */
        post: operations["llm_token_create_v0_account_llm_tokens_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/llm_tokens/{token_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Llm Token Delete
         * @description Delete an LLM token (admin only)
         */
        delete: operations["llm_token_delete_v0_account_llm_tokens__token_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/aws_credentials": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Aws Credentials
         * @description Get AWS credentials (admin only)
         */
        get: operations["get_aws_credentials_v0_account_aws_credentials_get"];
        put?: never;
        /**
         * Create Aws Credentials
         * @description Create or update AWS credentials (admin only)
         */
        post: operations["create_aws_credentials_v0_account_aws_credentials_post"];
        /**
         * Delete Aws Credentials
         * @description Delete AWS credentials (admin only)
         */
        delete: operations["delete_aws_credentials_v0_account_aws_credentials_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Organizations
         * @description List organizations or get a specific organization.
         *     - If organization_id is provided, returns just that organization
         *     - If user_id is provided, returns organizations for that user
         *     - Otherwise returns all organizations (admin only)
         *     - user_id and organization_id are mutually exclusive
         */
        get: operations["list_organizations_v0_account_organizations_get"];
        put?: never;
        /**
         * Create Organization
         * @description Create a new organization
         */
        post: operations["create_organization_v0_account_organizations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/organizations/{organization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update Organization
         * @description Update an organization (account admin or organization admin)
         */
        put: operations["update_organization_v0_account_organizations__organization_id__put"];
        post?: never;
        /**
         * Delete Organization
         * @description Delete an organization (account admin or organization admin)
         */
        delete: operations["delete_organization_v0_account_organizations__organization_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Users
         * @description List users or get a specific user.
         *     - If user_id is provided, returns just that user (requires proper permissions)
         *     - If organization_id is provided, returns users from that organization
         *     - Otherwise returns all users (admin only)
         *     - user_id and organization_id are mutually exclusive
         */
        get: operations["list_users_v0_account_users_get"];
        put?: never;
        /**
         * Create User
         * @description Create a new user (admin only)
         */
        post: operations["create_user_v0_account_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update User
         * @description Update a user's details (admin or self)
         */
        put: operations["update_user_v0_account_users__user_id__put"];
        post?: never;
        /**
         * Delete User
         * @description Delete a user (admin or self)
         */
        delete: operations["delete_user_v0_account_users__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/email/verification/register/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Registration Verification Email
         * @description Send verification email for newly registered users (no auth required)
         */
        post: operations["send_registration_verification_email_v0_account_email_verification_register__user_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/email/verification/send/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send Verification Email
         * @description Send verification email (admin only)
         */
        post: operations["send_verification_email_v0_account_email_verification_send__user_id__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/email/verification/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Verify Email
         * @description Verify email address using token
         */
        post: operations["verify_email_v0_account_email_verification__token__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/email/invitations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Invitations
         * @description List all invitations (admin only)
         */
        get: operations["list_invitations_v0_account_email_invitations_get"];
        put?: never;
        /**
         * Create Invitation
         * @description Create a new invitation (admin only)
         */
        post: operations["create_invitation_v0_account_email_invitations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/email/invitations/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Invitation
         * @description Get invitation details by token
         */
        get: operations["get_invitation_v0_account_email_invitations__token__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v0/account/email/invitations/{token}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept Invitation
         * @description Accept an invitation and create user account if needed
         */
        post: operations["accept_invitation_v0_account_email_invitations__token__accept_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AWSCredentials */
        AWSCredentials: {
            /** Access Key Id */
            access_key_id: string;
            /** Secret Access Key */
            secret_access_key: string;
        };
        /** AcceptInvitationRequest */
        AcceptInvitationRequest: {
            /** Name */
            name?: string | null;
            /** Password */
            password?: string | null;
        };
        /** AccessToken */
        AccessToken: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /** Organization Id */
            organization_id?: string | null;
            /** Name */
            name: string;
            /** Token */
            token: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Lifetime */
            lifetime: number;
        };
        /** CreateAccessTokenRequest */
        CreateAccessTokenRequest: {
            /** Name */
            name: string;
            /** Lifetime */
            lifetime: number;
            /** Organization Id */
            organization_id?: string | null;
        };
        /** CreateInvitationRequest */
        CreateInvitationRequest: {
            /** Email */
            email: string;
            /** Organization Id */
            organization_id?: string | null;
        };
        /** CreateLLMTokenRequest */
        CreateLLMTokenRequest: {
            /**
             * Llm Vendor
             * @enum {string}
             */
            llm_vendor: "OpenAI" | "Anthropic" | "Gemini" | "Groq" | "Mistral";
            /** Token */
            token: string;
        };
        /** DocumentMetadata */
        DocumentMetadata: {
            /** Id */
            id: string;
            /** Pdf Id */
            pdf_id: string;
            /** Document Name */
            document_name: string;
            /**
             * Upload Date
             * Format: date-time
             */
            upload_date: string;
            /** Uploaded By */
            uploaded_by: string;
            /** State */
            state: string;
            /**
             * Tag Ids
             * @default []
             */
            tag_ids: string[];
        };
        /** DocumentResponse */
        DocumentResponse: {
            metadata: components["schemas"]["DocumentMetadata"];
            /** Content */
            content: string;
        };
        /**
         * DocumentUpdate
         * @description Schema for updating document metadata
         */
        DocumentUpdate: {
            /**
             * Document Name
             * @description New name for the document
             */
            document_name?: string | null;
            /**
             * Tag Ids
             * @description List of tag IDs associated with the document
             * @default []
             */
            tag_ids: string[];
        };
        /** DocumentUpload */
        DocumentUpload: {
            /** Name */
            name: string;
            /** Content */
            content: string;
            /**
             * Tag Ids
             * @default []
             */
            tag_ids: string[];
        };
        /** DocumentsUpload */
        DocumentsUpload: {
            /** Documents */
            documents: components["schemas"]["DocumentUpload"][];
        };
        /** Flow */
        Flow: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Nodes */
            nodes: Record<string, never>[];
            /** Edges */
            edges: Record<string, never>[];
            /** Tag Ids */
            tag_ids?: string[] | null;
            /** Id */
            id: string;
            /** Version */
            version: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Created By */
            created_by: string;
        };
        /** FlowConfig */
        FlowConfig: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Nodes */
            nodes: Record<string, never>[];
            /** Edges */
            edges: Record<string, never>[];
            /** Tag Ids */
            tag_ids?: string[] | null;
        };
        /** FlowMetadata */
        FlowMetadata: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Version */
            version: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Created By */
            created_by: string;
            /** Tag Ids */
            tag_ids?: string[] | null;
        };
        /** GetOCRMetadataResponse */
        GetOCRMetadataResponse: {
            /** N Pages */
            n_pages: number;
            /** Ocr Date */
            ocr_date: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** InvitationResponse */
        InvitationResponse: {
            /** Id */
            id: string;
            /** Email */
            email: string;
            status: components["schemas"]["InvitationStatus"];
            /**
             * Expires
             * Format: date-time
             */
            expires: string;
            /** Created By */
            created_by: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Organization Id */
            organization_id?: string | null;
            /** Organization Name */
            organization_name?: string | null;
            /** User Exists */
            user_exists?: boolean | null;
        };
        /**
         * InvitationStatus
         * @enum {string}
         */
        InvitationStatus: "pending" | "accepted" | "expired";
        /** LLMModel */
        LLMModel: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Provider */
            provider: string;
            /** Description */
            description: string;
            /** Max Tokens */
            max_tokens: number;
            /** Cost Per 1M Input Tokens */
            cost_per_1m_input_tokens: number;
            /** Cost Per 1M Output Tokens */
            cost_per_1m_output_tokens: number;
        };
        /** LLMResult */
        LLMResult: {
            /** Prompt Id */
            prompt_id: string;
            /** Document Id */
            document_id: string;
            /** Llm Result */
            llm_result: Record<string, never>;
            /** Updated Llm Result */
            updated_llm_result: Record<string, never>;
            /** Is Edited */
            is_edited: boolean;
            /** Is Verified */
            is_verified: boolean;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** LLMRunResponse */
        LLMRunResponse: {
            /** Status */
            status: string;
            /** Result */
            result: Record<string, never>;
        };
        /** LLMToken */
        LLMToken: {
            /** Id */
            id: string;
            /** User Id */
            user_id: string;
            /**
             * Llm Vendor
             * @enum {string}
             */
            llm_vendor: "OpenAI" | "Anthropic" | "Gemini" | "Groq" | "Mistral";
            /** Token */
            token: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
        };
        /** ListAccessTokensResponse */
        ListAccessTokensResponse: {
            /** Access Tokens */
            access_tokens: components["schemas"]["AccessToken"][];
        };
        /** ListDocumentsResponse */
        ListDocumentsResponse: {
            /** Documents */
            documents: components["schemas"]["DocumentMetadata"][];
            /** Total Count */
            total_count: number;
            /** Skip */
            skip: number;
        };
        /** ListFlowsResponse */
        ListFlowsResponse: {
            /** Flows */
            flows: components["schemas"]["FlowMetadata"][];
            /** Total Count */
            total_count: number;
            /** Skip */
            skip: number;
        };
        /** ListInvitationsResponse */
        ListInvitationsResponse: {
            /** Invitations */
            invitations: components["schemas"]["InvitationResponse"][];
            /** Total Count */
            total_count: number;
            /** Skip */
            skip: number;
        };
        /** ListLLMModelsResponse */
        ListLLMModelsResponse: {
            /** Models */
            models: components["schemas"]["LLMModel"][];
        };
        /** ListLLMTokensResponse */
        ListLLMTokensResponse: {
            /** Llm Tokens */
            llm_tokens: components["schemas"]["LLMToken"][];
        };
        /** ListOrganizationsResponse */
        ListOrganizationsResponse: {
            /** Organizations */
            organizations: components["schemas"]["Organization"][];
        };
        /** ListPromptsResponse */
        ListPromptsResponse: {
            /** Prompts */
            prompts: components["schemas"]["Prompt"][];
            /** Total Count */
            total_count: number;
            /** Skip */
            skip: number;
        };
        /** ListSchemasResponse */
        ListSchemasResponse: {
            /** Schemas */
            schemas: components["schemas"]["Schema"][];
            /** Total Count */
            total_count: number;
            /** Skip */
            skip: number;
        };
        /** ListTagsResponse */
        ListTagsResponse: {
            /** Tags */
            tags: components["schemas"]["Tag"][];
            /** Total Count */
            total_count: number;
            /** Skip */
            skip: number;
        };
        /** ListUsersResponse */
        ListUsersResponse: {
            /** Users */
            users: components["schemas"]["UserResponse"][];
            /** Total Count */
            total_count: number;
            /** Skip */
            skip: number;
        };
        /** Organization */
        Organization: {
            /** Id */
            id: string;
            /** Name */
            name: string;
            /** Members */
            members: components["schemas"]["OrganizationMember"][];
            /**
             * Type
             * @default individual
             * @enum {string}
             */
            type: "individual" | "team" | "enterprise";
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** OrganizationCreate */
        OrganizationCreate: {
            /** Name */
            name: string;
            /**
             * Type
             * @default individual
             * @enum {string}
             */
            type: "individual" | "team" | "enterprise";
        };
        /** OrganizationMember */
        OrganizationMember: {
            /** User Id */
            user_id: string;
            /**
             * Role
             * @enum {string}
             */
            role: "admin" | "user";
        };
        /** OrganizationUpdate */
        OrganizationUpdate: {
            /** Name */
            name?: string | null;
            /**
             * Type
             * @default individual
             * @enum {string}
             */
            type: "individual" | "team" | "enterprise";
            /** Members */
            members?: components["schemas"]["OrganizationMember"][] | null;
        };
        /** Prompt */
        Prompt: {
            /** Name */
            name: string;
            /** Content */
            content: string;
            /** Schema Id */
            schema_id?: string | null;
            /** Schema Version */
            schema_version?: number | null;
            /**
             * Tag Ids
             * @default []
             */
            tag_ids: string[];
            /**
             * Model
             * @default gpt-4o-mini
             */
            model: string;
            /** Prompt Revid */
            prompt_revid: string;
            /** Prompt Id */
            prompt_id: string;
            /** Prompt Version */
            prompt_version: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Created By */
            created_by: string;
        };
        /** PromptConfig */
        PromptConfig: {
            /** Name */
            name: string;
            /** Content */
            content: string;
            /** Schema Id */
            schema_id?: string | null;
            /** Schema Version */
            schema_version?: number | null;
            /**
             * Tag Ids
             * @default []
             */
            tag_ids: string[];
            /**
             * Model
             * @default gpt-4o-mini
             */
            model: string;
        };
        /** ResponseFormat */
        ResponseFormat: {
            /**
             * Type
             * @constant
             */
            type: "json_schema";
            /**
             * Json Schema
             * @example {
             *       "name": "document_extraction",
             *       "schema": {
             *         "additionalProperties": false,
             *         "properties": {
             *           "invoice_date": {
             *             "description": "invoice date",
             *             "type": "string"
             *           }
             *         },
             *         "required": [
             *           "invoice_date"
             *         ],
             *         "type": "object"
             *       },
             *       "strict": true
             *     }
             */
            json_schema: Record<string, never>;
        };
        /** Schema */
        Schema: {
            /** Name */
            name: string;
            response_format: components["schemas"]["ResponseFormat"];
            /** Schema Revid */
            schema_revid: string;
            /** Schema Id */
            schema_id: string;
            /** Schema Version */
            schema_version: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Created By */
            created_by: string;
        };
        /** SchemaConfig */
        SchemaConfig: {
            /** Name */
            name: string;
            response_format: components["schemas"]["ResponseFormat"];
        };
        /** Tag */
        Tag: {
            /** Name */
            name: string;
            /** Color */
            color?: string | null;
            /** Description */
            description?: string | null;
            /** Id */
            id: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /** Created By */
            created_by: string;
        };
        /** TagConfig */
        TagConfig: {
            /** Name */
            name: string;
            /** Color */
            color?: string | null;
            /** Description */
            description?: string | null;
        };
        /** UpdateLLMResultRequest */
        UpdateLLMResultRequest: {
            /** Updated Llm Result */
            updated_llm_result: Record<string, never>;
            /**
             * Is Verified
             * @default false
             */
            is_verified: boolean;
        };
        /** UserCreate */
        UserCreate: {
            /** Email */
            email: string;
            /** Name */
            name: string;
            /** Password */
            password: string;
        };
        /** UserResponse */
        UserResponse: {
            /** Id */
            id: string;
            /** Email */
            email: string;
            /** Name */
            name: string | null;
            /** Role */
            role: string;
            /** Emailverified */
            emailVerified: boolean | null;
            /**
             * Createdat
             * Format: date-time
             */
            createdAt: string;
            /** Haspassword */
            hasPassword: boolean;
            /** Hasseentour */
            hasSeenTour?: boolean | null;
        };
        /** UserUpdate */
        UserUpdate: {
            /** Name */
            name?: string | null;
            /** Password */
            password?: string | null;
            /** Role */
            role?: string | null;
            /** Emailverified */
            emailVerified?: boolean | null;
            /** Hasseentour */
            hasSeenTour?: boolean | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_org_tokens_v0_orgs__organization_id__access_tokens_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAccessTokensResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_org_token_v0_orgs__organization_id__access_tokens_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAccessTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessToken"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_org_token_v0_orgs__organization_id__access_tokens__token_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                token_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_documents_v0_orgs__organization_id__documents_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                /** @description Comma-separated list of tag IDs */
                tag_ids?: string;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListDocumentsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_document_v0_orgs__organization_id__documents_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentsUpload"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_document_v0_orgs__organization_id__documents__document_id__get: {
        parameters: {
            query?: {
                /** @description Which file to retrieve: 'original' or 'pdf' */
                file_type?: "original" | "pdf";
            };
            header?: never;
            path: {
                organization_id: string;
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_document_v0_orgs__organization_id__documents__document_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                document_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_document_v0_orgs__organization_id__documents__document_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_ocr_blocks_v0_orgs__organization_id__ocr_download_blocks__document_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    download_ocr_text_v0_orgs__organization_id__ocr_download_text__document_id__get: {
        parameters: {
            query?: {
                /** @description Specific page number to retrieve */
                page_num?: number | null;
            };
            header?: never;
            path: {
                organization_id: string;
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_ocr_metadata_v0_orgs__organization_id__ocr_download_metadata__document_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOCRMetadataResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    run_llm_analysis_v0_orgs__organization_id__llm_run__document_id__post: {
        parameters: {
            query?: {
                /** @description The prompt ID to use */
                prompt_id?: string;
                /** @description Force new run even if result exists */
                force?: boolean;
            };
            header?: never;
            path: {
                organization_id: string;
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMRunResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_llm_result_v0_orgs__organization_id__llm_result__document_id__get: {
        parameters: {
            query?: {
                /** @description The prompt ID to retrieve */
                prompt_id?: string;
            };
            header?: never;
            path: {
                organization_id: string;
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_llm_result_v0_orgs__organization_id__llm_result__document_id__put: {
        parameters: {
            query: {
                /** @description The prompt ID to update */
                prompt_id: string;
            };
            header?: never;
            path: {
                organization_id: string;
                document_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLLMResultRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMResult"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_llm_result_v0_orgs__organization_id__llm_result__document_id__delete: {
        parameters: {
            query: {
                /** @description The prompt ID to delete */
                prompt_id: string;
            };
            header?: never;
            path: {
                organization_id: string;
                document_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_schemas_v0_orgs__organization_id__schemas_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListSchemasResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_schema_v0_orgs__organization_id__schemas_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SchemaConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_schema_v0_orgs__organization_id__schemas__schema_revid__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                schema_revid: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_schema_v0_orgs__organization_id__schemas__schema_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                schema_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SchemaConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Schema"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_schema_v0_orgs__organization_id__schemas__schema_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                schema_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    validate_against_schema_v0_orgs__organization_id__schemas__schema_revid__validate_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                schema_revid: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_prompts_v0_orgs__organization_id__prompts_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
                /** @description Filter prompts by document's tags */
                document_id?: string;
                /** @description Comma-separated list of tag IDs */
                tag_ids?: string;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListPromptsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_prompt_v0_orgs__organization_id__prompts_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_prompt_v0_orgs__organization_id__prompts__prompt_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                prompt_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_prompt_v0_orgs__organization_id__prompts__prompt_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                prompt_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PromptConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_prompt_v0_orgs__organization_id__prompts__prompt_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                prompt_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_tags_v0_orgs__organization_id__tags_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListTagsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_tag_v0_orgs__organization_id__tags_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_tag_v0_orgs__organization_id__tags__tag_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Tag"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_tag_v0_orgs__organization_id__tags__tag_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_flows_v0_orgs__organization_id__flows_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFlowsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_flow_v0_orgs__organization_id__flows_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlowConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Flow"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_flow_v0_orgs__organization_id__flows__flow_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                flow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Flow"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_flow_v0_orgs__organization_id__flows__flow_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                flow_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FlowConfig"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Flow"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_flow_v0_orgs__organization_id__flows__flow_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
                flow_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_auth_token_v0_account_auth_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_account_tokens_v0_account_access_tokens_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListAccessTokensResponse"];
                };
            };
        };
    };
    create_account_token_v0_account_access_tokens_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateAccessTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessToken"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_account_token_v0_account_access_tokens__token_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_llm_models_v0_account_llm_models_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListLLMModelsResponse"];
                };
            };
        };
    };
    llm_token_list_v0_account_llm_tokens_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListLLMTokensResponse"];
                };
            };
        };
    };
    llm_token_create_v0_account_llm_tokens_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLLMTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LLMToken"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    llm_token_delete_v0_account_llm_tokens__token_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_aws_credentials_v0_account_aws_credentials_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_aws_credentials_v0_account_aws_credentials_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AWSCredentials"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_aws_credentials_v0_account_aws_credentials_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_organizations_v0_account_organizations_get: {
        parameters: {
            query?: {
                /** @description Filter organizations by user ID */
                user_id?: string | null;
                /** @description Get a specific organization by ID */
                organization_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListOrganizationsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_organization_v0_account_organizations_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_organization_v0_account_organizations__organization_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_organization_v0_account_organizations__organization_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_users_v0_account_users_get: {
        parameters: {
            query?: {
                /** @description Filter users by organization ID */
                organization_id?: string | null;
                /** @description Get a specific user by ID */
                user_id?: string | null;
                /** @description Number of users to skip */
                skip?: number;
                /** @description Number of users to return */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListUsersResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_user_v0_account_users_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_v0_account_users__user_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_v0_account_users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_registration_verification_email_v0_account_email_verification_register__user_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    send_verification_email_v0_account_email_verification_send__user_id__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    verify_email_v0_account_email_verification__token__post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_invitations_v0_account_email_invitations_get: {
        parameters: {
            query?: {
                skip?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListInvitationsResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_invitation_v0_account_email_invitations_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateInvitationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvitationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_invitation_v0_account_email_invitations__token__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvitationResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    accept_invitation_v0_account_email_invitations__token__accept_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AcceptInvitationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
